/*! For license information please see main.2533f18166b40c94f122.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatefrontend("main",{"./src/components/400_demos/10_demo_DMV_ClassC/0_features/PDFViewer/PDFVIewer.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PDFViewer.module.css */ "./src/components/400_demos/10_demo_DMV_ClassC/0_features/PDFViewer/PDFViewer.module.css");\n/* harmony import */ var _pdf1_pdf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pdf1.pdf */ "./src/components/400_demos/10_demo_DMV_ClassC/0_features/PDFViewer/pdf1.pdf");\n/* harmony import */ var _0_features_demoNavbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./0_features/demoNavbar */ "./src/components/400_demos/10_demo_DMV_ClassC/0_features/PDFViewer/0_features/demoNavbar.js");\n\n\n\n\nconst PDFViewer = () => {\n  const [pdfState, setPdfState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n    pdfUrl: _pdf1_pdf__WEBPACK_IMPORTED_MODULE_2__["default"],\n    //The Document URL/File Location\n    pdfDocument: null,\n    //The Document Object (before being set)\n    scale: null,\n    //The size of document rendering on screen(Height-Based)\n    scaleFull: null,\n    //The size of document rendering on screen(Width-Based)\n    pageNum: 1,\n    inputValue: 1 //Page Manual Input for *goto page functionality\n  });\n\n  const [pageIsRendering, setPageIsRendering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false); //The Rendering State\n  const [windowSizeChanges, setWindowSizeChanges] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1); //\n  const [triggerRerender, setTriggerRerender] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n  const [isFullScreen, setIsFullScreen] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false); //\n  let pageNumIsPending = null; //While fetching other pages, this is a placeholder for the "page num" (i.e "num" variable). So that once older render is complete, the new page will be rendered\n  const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null); //The <canvas> element is a container for graphics -- to draw graphics on a web page through scripting (usually JavaScript)\n  const textLayerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n\n  //!Set pdfDocument, FullScreen Scale\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    //!Get Document\n    // console.log("Fetching PDF document for URL: ", pdfState.pdfUrl);\n    const fetchPdf = async () => {\n      try {\n        const pdfDoc = await pdfjsLib.getDocument(pdfState.pdfUrl).promise; //pdfjsLib uses getDocument(pdf_url) method and returns the Document object\n        const page = await pdfDoc.getPage(pdfState.pageNum); //creates a pdf page object by using the pdfDoc object/pdf document\n        const viewport = page.getViewport({\n          scale: 1\n        }); //get Viewport of pdf page (i.e. Representation of the size and scale at which the PDF page should be rendered)\n        const windowWidth = window.innerWidth; //Make the Canvas\' height = ViewPort\'s height\n        const windowHeight = window.innerHeight; //Make the Canvas\' height = ViewPort\'s height\n        const scaleForStart = windowHeight / viewport.height; //Based on the size the pdf shown, we estimate the scale equal to the full size of the window so that the pdf renders as large as possible based on the window size\n        let scaleToUse = scaleForStart;\n        setPdfState(prevState => ({\n          ...prevState,\n          pdfDocument: pdfDoc,\n          scale: scaleToUse //Set the state of the scale that will be used.\n        }));\n      } catch (error) {\n        //catch error\n        console.error("Error loading PDF: ", error);\n      }\n    };\n    fetchPdf();\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    //!Get Document\n    const fetchPdf = async () => {\n      if (pdfState.pdfDocument) {\n        // Only fetch if pdfDocument is not already loaded\n        try {\n          const page = await pdfState.pdfDocument.getPage(pdfState.pageNum); //creates a pdf page object by using the pdfDoc object/pdf document\n          const viewport = page.getViewport({\n            scale: 1\n          }); //get Viewport of pdf page (i.e. Representation of the size and scale at which the PDF page should be rendered)\n          const windowWidth = window.innerWidth; //Make the Canvas\' height = ViewPort\'s height\n          const windowHeight = window.innerHeight; //Make the Canvas\' height = ViewPort\'s height\n          const scaleForFull = windowWidth / viewport.width; //Based on the size the pdf shown, we estimate the scale equal to the full size of the window so that the pdf renders as large as possible based on the window size\n          const scaleForStart = windowHeight / viewport.height; //Based on the size the pdf shown, we estimate the scale equal to the full size of the window so that the pdf renders as large as possible based on the window size\n          let scaleToUse;\n          isFullScreen ? scaleToUse = scaleForFull : scaleToUse = scaleForStart;\n          setPdfState(prevState => ({\n            ...prevState,\n            scale: scaleToUse //Set the state of the scale that will be used.\n          }));\n        } catch (error) {\n          //catch error\n          console.error("Error loading PDF: ", error);\n        }\n      }\n    };\n    fetchPdf();\n  }, [windowSizeChanges, isFullScreen]); //The document will be set every time the document url changes\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    //console.log("Attempting to render page: ", pdfState.pageNum, "with scale:", pdfState.scale);\n    if (pdfState.pdfDocument && pdfState.scale) {\n      //if the pdf Document has been set, then:\n      setPdfState(prevState => ({\n        //When the pdfDocument sets, the pageNum, or the scale change, the Input Value is set.\n        ...prevState,\n        inputValue: pdfState.pageNum\n      }));\n      renderPage(pdfState.pageNum); //Render the Page (pageNum is initially set to page# 1)\n    }\n  }, [pdfState.pageNum, pdfState.scale, triggerRerender]); //Removed "pdfDocument"...\n\n  //!Render the page\n  const renderPage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async num => {\n    //Function for rendering page\n    //console.log("Rendering page number:", num);\n    if (pageIsRendering || pdfState.scale == null) return; //Ensure that you do not attempt another rendering operation until the current one is finished.\n    setPageIsRendering(true); //Change Rendering Status to "true"/currently rendering\n    const canvas = canvasRef.current; //The <canvas> element is a container for graphics -- to draw graphics on a web page through scripting (usually JavaScript)\n    const context = canvas.getContext("2d"); //The object with properties and methods for rendering graphics inside the canvas (shapes, text, images, scaling, rotating, translating objects, and more)\n\n    //console.log("Page is rendering...");\n    //!Get page\n    try {\n      const page = await pdfState.pdfDocument.getPage(num); //Creates a pdf page object by using the pdfDoc object/pdf document\n      if (!page || !canvasRef.current) {\n        setPageIsRendering(false);\n        //console.error(\'Error: Page or canvas is not available.\')\n        return; //If the canvas element isn\'t available yet, then exit render function\n      }\n      //!Set scale\n      const viewport = page.getViewport({\n        scale: pdfState.scale\n      }); //Get Viewport of pdf page (i.e. Representation of the size and scale at which the PDF page should be rendered)\n      canvas.height = viewport.height; //Make the Canvas\' height = ViewPort\'s height\n      canvas.width = viewport.width; //Make the Canvas\' width = ViewPort\'s width\n      const renderContext = {\n        canvasContext: context,\n        //The object with properties and methods for rendering graphics inside the canvas\n        viewport //Representation of the size and scale at which the PDF page should be rendered\n      };\n\n      const renderTask = await page.render(renderContext).promise;\n      //!Render the page (actual)                                  //draws the content of a specific pdf page onto the canvas  https://github.com/mozilla/pdf.js/issues/7072#issuecomment-459616711\n      setPageIsRendering(false); //Once the page is rendered, set rendering state to false\n      const textContent = await page.getTextContent(); //Once page is rendered, extract text content\n      //!Create the textLayer                                      //Text layer (allows text selection/accessibility features)\n      const textLayerDiv = textLayerRef.current; //??? is this needed? Select HTML div element with ID \'textLayer.\' This will serve as the container for the rendered text layer\n      textLayerDiv.className = "textLayer"; //?? is this needed?  Set class for styling (The styling comes from the pdf_viewer.css file --\x3e https://github.com/mozilla/pdfjs-dist/blob/master/web/pdf_viewer.css)\n      const textLayer = pdfjsLib.renderTextLayer({\n        //Create text layer\n        textContent: textContent,\n        //\n        container: textLayerDiv,\n        //Specifies the container (textLayerDiv)\n        viewport //Specifies the dimensions/scale at which the PDF page will be rendered\n      });\n      //!Render the textLayer (actual)\n      textLayer._render(); //Render text layer onto the textLayerDiv\n      if (pageNumIsPending !== null) {\n        //This conditional block checks if there is a pending page number to be rendered\n        renderPage(pageNumIsPending); //If there is, it calls renderPage(pageNumIsPending) to render the specified page\n        pageNumIsPending = null; //Then sets pageNumIsPending to null\n      }\n    } catch (error) {\n      setPageIsRendering(false);\n      console.error("Error rendering page:", error);\n    }\n  }, [pdfState.scale, pageIsRendering, pdfState.pdfDocument]);\n  //!Prev-Next Page\n  const showNextPage = () => {\n    //if page is greater than or equal to maxPages, return and do nothing\n    let newVal = pdfState.pageNum + 1;\n    if (pdfState.pdfDocument && newVal <= pdfState.pdfDocument.numPages) {\n      // setPageNum(newVal);\n      // setInputValue(newVal);\n      setPdfState(prevState => ({\n        ...prevState,\n        pageNum: prevState.pageNum + 1,\n        inputValue: prevState.pageNum + 1\n      }));\n    }\n  };\n  const showPrevPage = () => {\n    let newVal = pdfState.pageNum - 1;\n    if (pdfState.pdfDocument && newVal >= 1) {\n      // setPageNum(newVal);\n      // setInputValue(newVal);\n      setPdfState(prevState => ({\n        ...prevState,\n        pageNum: prevState.pageNum - 1,\n        inputValue: prevState.pageNum - 1\n      }));\n    }\n  };\n  //!Page Input Field\n  const handleInputChange = e => {\n    const val = e.target.value;\n    setPdfState(prevState => ({\n      ...prevState,\n      inputValue: val // Update inputValue directly in pdfState\n    }));\n\n    if (val === "") {\n      setPdfState(prevState => ({\n        ...prevState,\n        pageNum: "",\n        // Set pageNum to an empty string when the input is empty\n        inputValue: "" // It\'s good to keep inputValue in sync\n      }));\n\n      return;\n    }\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const identifier = setTimeout(() => {\n      var newPageNum = parseInt(pdfState.inputValue, 10);\n      if (pdfState.pdfDocument && newPageNum >= 1 && newPageNum <= pdfState.pdfDocument.numPages) {\n        setPdfState(prevState => ({\n          ...prevState,\n          pageNum: newPageNum // Update pageNum within pdfState\n        }));\n      }\n    }, 700);\n    return () => {\n      clearTimeout(identifier);\n    };\n  }, [pdfState.inputValue]);\n  //!Zoom Functionality\n  const zoomIn = () => {\n    setPdfState(prevState => ({\n      ...prevState,\n      scale: prevState.scale + 0.5 // Decreasing the scale by 0.5\n    }));\n  };\n\n  const zoomOut = () => {\n    setPdfState(prevState => ({\n      ...prevState,\n      scale: prevState.scale - 0.5 // Decreasing the scale by 0.5\n    }));\n  };\n  //!Event Listeners\n  const handleKeyDown = e => {\n    if (e.key == "ArrowRight") {\n      showNextPage();\n    } else if (e.key == "ArrowLeft") {\n      showPrevPage();\n    }\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    document.addEventListener("keydown", handleKeyDown);\n    return () => {\n      document.removeEventListener("keydown", handleKeyDown); // Ensure to remove the event listener on component unmount or before re-adding\n    };\n  }, [pdfState.pageNum, pdfState.pdfDocument]); //Include pageNum and pdfDocument to ensure the listener updates\n  //!FullScreen\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (isFullScreen) {\n      let resizeTimer;\n      const handleResize = () => {\n        clearTimeout(resizeTimer);\n        resizeTimer = setTimeout(() => {\n          setWindowSizeChanges(prevCount => prevCount + 1);\n        }, 300);\n      };\n      window.addEventListener("resize", handleResize); // Adding the resize event listener to the window\n      return () => {\n        window.removeEventListener("resize", handleResize);\n        clearTimeout(resizeTimer); // Clear the timeout to prevent delayed execution\n      };\n    }\n  }, [isFullScreen]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    document.addEventListener("keydown", handleKeyDown);\n    return () => {\n      document.removeEventListener("keydown", handleKeyDown); // Ensure to remove the event listener on component unmount or before re-adding\n    };\n  }, [pdfState.pageNum, pdfState.pdfDocument]); //Include pageNum and pdfDocument to ensure the listener updates\n  const toggleFullScreen = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    setIsFullScreen(prev => !prev); // Toggle the full screen state\n    if (renderTask) {\n      renderTask.cancel();\n    }\n    setTriggerRerender(prevCount => prevCount + 1); // Trigger re-render due to scale change\n  }, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_0_features_demoNavbar__WEBPACK_IMPORTED_MODULE_3__["default"], {\n    isFullScreen: isFullScreen,\n    toggleFullScreen: toggleFullScreen\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    id: "my_pdf_viewer",\n    className: _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__["default"].pdf_viewer\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    id: "canvas_container",\n    className: _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__["default"].canvas_container\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("canvas", {\n    ref: canvasRef,\n    id: "canvas"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    id: "textLayer",\n    ref: textLayerRef,\n    className: _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__["default"].textLayer\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    className: _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__["default"].navigation_container\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {\n    className: _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__["default"].navigation_controls\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PaginationGUI, null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {\n    onClick: showPrevPage,\n    id: "go_previous"\n  }, "Previous Page"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("input", {\n    type: "text",\n    onChange: handleInputChange,\n    value: pdfState.inputValue,\n    id: "current_page"\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {\n    onClick: showNextPage,\n    id: "go_next"\n  }, "Next Page"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("span", {\n    className: _PDFViewer_module_css__WEBPACK_IMPORTED_MODULE_1__["default"].zoom_controls\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {\n    onClick: zoomIn,\n    id: "zoom_in"\n  }, "+"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("button", {\n    onClick: zoomOut,\n    id: "zoom_out"\n  }, "-")))))));\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PDFViewer);\n\n//# sourceURL=webpack://frontend/./src/components/400_demos/10_demo_DMV_ClassC/0_features/PDFViewer/PDFVIewer.js?')}},(function(e){e.h=()=>"a2fe0a1e9342f1f331d9"}));