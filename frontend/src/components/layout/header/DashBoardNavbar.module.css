.outer_container_nav {              
    display: flex;
    position: absolute;
    justify-content: center;
    align-items: center;
    height: 48px;
    width: 100%;
    max-width: 3840px;
    margin: 0 auto;
    top: 0;
    z-index: 1000;
    background-color: rgba(79, 79, 79, 0.408);
    transition: top 0.3ms;
}

.outer_container_nav.isFullScreen { 
    top: -44px; 
}

.outer_container_nav.isFullScreen:hover {
    top: 0;
}

.inner_container_nav {
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    height: 48px;
    width: 100%;
    padding: 0;
    margin: 0;
    color: #ffffff;
}

@media(max-width: 475px){
    .outer_container_nav{
        width: 100%;
        min-width: 375px;
    }
    .inner_container_nav .NavItem2{
        display: none;
    }
}

.NavBarMenuItem {
    display: flex;
    margin-left: 60px;
    margin-right: 2.5%;
    justify-content: flex-end;
}

.avatar {
    display: flex;
    height: 2.2rem;
    width: 2.2rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
    margin-left: .5rem;
    margin-right: .5rem;
    align-items: center;
}

/* Page Controls */
.windowControlsContainer {
    display: flex;
    margin-left: 2.5%;
    margin-right: auto;
    justify-content: flex-start;
}

.close {
    width: 12px;
    height: 12px;
    border-radius: 50%;                /*Turns the square into a circle*/
    margin: 0 4px;
    border: none;
    position: relative;                /*Sets the position context for absolutely positioned pseudo-elements that may be inside the button + becomes a positioning context for any absolutely positioned child elements. -->  position: relative; on an element (like .close in your example), any child elements inside it that use position: absolute; will position themselves relative to the boundaries of this parent element*/
    overflow: hidden;
    background-color: #ff5f56;
}
.close::before {                       /*"before" pseudo-element used here because we want the symbol 'x' to appear before the button*/
    position: absolute;                /*pseudo-element 'x' positioned absolutely relative to 'close'*/
    top: 50%;                          /*Position the element such that its top-left corner is at the center of its parent. Setting both top and left to 50% means the element’s top-left corner will be placed right at the middle of the parent element's height and width.*/
    left: 50%;
    transform: translate(-50%, -50%);  /*Moves the element back on both the x-axis and y-axis by 50% of its own width and height, respectively.*/
    opacity: 0;                        /*Invisible */                      
    transition: opacity 0.3s ease;     /*The transition effect + Hover property below -->  specifies that any changes to the opacity property will occur over a duration of 0.3 seconds and will follow an "ease" timing function. .*/
    content: '✕';                      /*pseudo-element content*/
    color: black;
}

.minimize {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin: 0 4px;
    border: none;
    position: relative;
    overflow: hidden;
    background-color: #ffbd2e;
}
.minimize::before {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    opacity: 0;                          /* invisible */                      
    transition: opacity 0.3s ease;
    content: '━';
    color: black;
}

.fullScreenToggle {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin: 0 4px;
    border: none;
    position: relative;
    overflow: hidden;
    background-color: #27c93f;
}
.fullScreenToggle::before {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
    content: '';
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none'%3E%3Cpath fill='%23000' d='M7 5.5a.499.499 0 0 1-.353-.853L9.293 2H7.5a.5.5 0 1 1 0-1h2.99a.5.5 0 0 1 .51.511v2.99a.5.5 0 1 1-1 0V2.706L7.354 5.354A.499.499 0 0 1 7 5.5ZM4.5 11a.5.5 0 1 0 0-1H2.707l2.647-2.646a.5.5 0 1 0-.707-.707L2 9.293V7.5a.5.5 0 1 0-1 0v2.99a.5.5 0 0 0 .5.51'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

.fullScreenToggle.isFullScreen::before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='none'%3E%3Cpath fill='%23000' d='M6.553 5.223A.5.5 0 0 0 7 5.5h3a.5.5 0 1 0 0-1H8.207l2.647-2.646a.5.5 0 1 0-.707-.707L7.5 3.793V2a.5.5 0 1 0-1 0v2.99a.5.5 0 0 0 .053.233ZM4.5 10a.5.5 0 1 0 1 0V7.011a.5.5 0 0 0-.51-.51H2a.5.5 0 1 0 0 1h1.793l-2.646 2.646a.5.5 0 1 0 .707.707L4.5 8.207V10Z'/%3E%3C/svg%3E");
}

.windowControlsContainer:hover .close::before,
.windowControlsContainer:hover .minimize::before,
.windowControlsContainer:hover .fullScreenToggle::before {  /* Corrected class name */
    opacity: 1;  /* visible */
}

.close:active, 
.minimize:active, 
.fullScreenToggle:active {
    filter: brightness(130%); /* Darkens the background color */
}
